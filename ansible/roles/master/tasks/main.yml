---
# Master node specific tasks

# Allow required ports through firewall for master
- name: Allow Kubernetes master ports through firewall
  ufw:
    rule: allow
    port: "{{ item }}"
    proto: tcp
  with_items:
    - 6443    # Kubernetes API server
    - 2379:2380  # etcd server client API
    - 10250   # kubelet API
    - 10259   # kube-scheduler
    - 10257   # kube-controller-manager

# Check if cluster is already initialized
- name: Check if Kubernetes cluster is already initialized
  stat:
    path: /etc/kubernetes/admin.conf
  register: k8s_admin_conf

# Initialize Kubernetes cluster with kubeadm
- name: Initialize Kubernetes cluster
  shell: >
    kubeadm init 
    --pod-network-cidr=10.244.0.0/16 
    --apiserver-advertise-address={{ ansible_host }}
    --control-plane-endpoint={{ ansible_host }}:6443
    --upload-certs
  register: kubeadm_init
  when: not k8s_admin_conf.stat.exists

- name: Extract join command for worker nodes
  shell: kubeadm token create --print-join-command
  register: join_command
  when: kubeadm_init.changed or not k8s_admin_conf.stat.exists

- name: Store join command for worker nodes
  local_action: 
    module: copy 
    content: "{{ join_command.stdout }}" 
    dest: "/tmp/kubeadm_join_cmd.sh"
    mode: 0777
  when: join_command is defined and join_command.stdout is defined

- name: Create kube directory for ubuntu user
  file:
    path: /home/ubuntu/.kube
    state: directory
    owner: ubuntu
    group: ubuntu
    mode: '0755'

- name: Copy admin.conf to ubuntu user's kube config
  copy:
    src: /etc/kubernetes/admin.conf
    dest: /home/ubuntu/.kube/config
    remote_src: yes
    owner: ubuntu
    group: ubuntu
    mode: '0644'

- name: Get kubeconfig to fetch locally
  fetch:
    src: /etc/kubernetes/admin.conf
    dest: /tmp/k8s-config
    flat: yes

# Install Flannel network plugin instead of Calico for better compatibility
- name: Download Flannel manifests
  get_url:
    url: https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
    dest: /tmp/kube-flannel.yml
  become: yes
  become_user: ubuntu

- name: Apply Flannel network plugin
  shell: kubectl apply -f /tmp/kube-flannel.yml
  become: yes
  become_user: ubuntu
  register: flannel_result
  changed_when: "'configured' in flannel_result.stdout or 'created' in flannel_result.stdout"

# Verify cluster is running
- name: Wait for nodes to be ready
  shell: kubectl get nodes
  register: nodes_ready
  until: "'NotReady' not in nodes_ready.stdout"
  retries: 30
  delay: 10
  become: yes
  become_user: ubuntu
  changed_when: false
