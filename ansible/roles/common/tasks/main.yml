---
# Common tasks for all Kubernetes nodes

# Fix locale settings first
- name: Install locales package
  apt:
    name: locales
    state: present
    update_cache: yes

- name: Generate en_US.UTF-8 locale
  locale_gen:
    name: en_US.UTF-8
    state: present

- name: Set system locale to en_US.UTF-8
  copy:
    content: |
      LANG=en_US.UTF-8
      LC_ALL=en_US.UTF-8
    dest: /etc/default/locale
    mode: '0644'
  notify: reload locale

- name: Set environment locale variables
  lineinfile:
    path: /etc/environment
    line: "{{ item }}"
    create: yes
  with_items:
    - "LANG=en_US.UTF-8"
    - "LC_ALL=en_US.UTF-8"

# Configure DNS and networking settings
- name: Install resolvconf
  apt:
    name: resolvconf
    state: present
  become: true

- name: Configure DNS resolver in resolvconf
  copy:
    content: |
      nameserver 8.8.8.8
      nameserver 8.8.4.4
    dest: /etc/resolvconf/resolv.conf.d/base
    mode: '0644'
  become: true
  notify: update resolvconf

- name: Configure systemd-resolved
  copy:
    content: |
      [Resolve]
      DNS=8.8.8.8 8.8.4.4
      DNSStubListener=no
    dest: /etc/systemd/resolved.conf
    mode: '0644'
  become: true
  notify: restart systemd-resolved

- name: Configure DNS server in netplan
  copy:
    content: |
      network:
        version: 2
        ethernets:
          eth0:
            dhcp4: true
            nameservers:
              addresses: [8.8.8.8, 8.8.4.4]
    dest: /etc/netplan/99-custom-dns.yaml
    mode: '0644'
  become: true

- name: Apply netplan configuration
  command: netplan apply
  become: true

- name: Configure network settings
  copy:
    content: |
      # Disable IPv6
      net.ipv6.conf.all.disable_ipv6 = 1
      net.ipv6.conf.default.disable_ipv6 = 1
      net.ipv6.conf.lo.disable_ipv6 = 1
    dest: /etc/sysctl.d/99-disable-ipv6.conf
    mode: '0644'
  become: true

- name: Apply sysctl settings
  command: sysctl -p /etc/sysctl.d/99-disable-ipv6.conf
  become: true

# Update apt cache and install required packages
- name: Clear apt cache
  shell: |
    rm -rf /var/lib/apt/lists/*
    mkdir -p /var/lib/apt/lists/partial
  become: true

- name: Configure apt to use IPv4
  copy:
    content: 'Acquire::ForceIPv4 "true";'
    dest: /etc/apt/apt.conf.d/99force-ipv4
    mode: '0644'
  become: true

- name: Update apt cache
  apt:
    update_cache: yes
    cache_valid_time: 3600
  environment:
    DEBIAN_FRONTEND: noninteractive
  become: true
  retries: 3
  delay: 10
  register: apt_update
  until: apt_update is success

- name: Wait for dpkg lock
  shell: while fuser /var/lib/dpkg/lock >/dev/null 2>&1 || fuser /var/lib/apt/lists/lock >/dev/null 2>&1 || fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1; do sleep 1; done
  become: true

- name: Kill unattended-upgrades if running
  shell: pkill -9 unattended-upgrades || true
  become: true
  ignore_errors: yes

- name: Install required packages
  apt:
    name: "{{ item }}"
    state: present
  with_items:
    - apt-transport-https
    - ca-certificates
    - curl
    - gnupg
    - lsb-release
    - software-properties-common
    - openssh-server

# Configure SSH service
- name: Ensure SSH server is installed
  apt:
    name: openssh-server
    state: present

- name: Ensure SSH service is running before configuration
  systemd:
    name: ssh
    state: started
    enabled: yes
    daemon_reload: yes

- name: Configure SSH daemon
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    backup: yes
  with_items:
    - { regexp: '^#?Port', line: 'Port 22' }
    - { regexp: '^#?PermitRootLogin', line: 'PermitRootLogin no' }
    - { regexp: '^#?PubkeyAuthentication', line: 'PubkeyAuthentication yes' }
    - { regexp: '^#?PasswordAuthentication', line: 'PasswordAuthentication yes' }
    - { regexp: '^#?ChallengeResponseAuthentication', line: 'ChallengeResponseAuthentication no' }
    - { regexp: '^#?UsePAM', line: 'UsePAM yes' }
  notify: restart sshd

- name: Wait for SSH to be available after config changes
  wait_for:
    port: 22
    host: "{{ ansible_host }}"
    state: started
    delay: 5
    timeout: 60
  become: false
  ignore_errors: yes
  delegate_to: localhost

- name: Start and enable SSH service (main)
  systemd:
    name: ssh
    state: started
    enabled: yes
    daemon_reload: yes

- name: Start and enable SSH service (alternative name)
  systemd:
    name: sshd
    state: started
    enabled: yes
    daemon_reload: yes
  ignore_errors: yes

- name: Verify SSH service is listening on port 22
  wait_for:
    port: 22
    host: 0.0.0.0
    delay: 5

# Kubernetes Setup

# Add Kubernetes apt repository
- name: Create apt keyrings directory
  file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'
  become: true

- name: Remove old Kubernetes repository files
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - /etc/apt/sources.list.d/kubernetes.list
    - /etc/apt/keyrings/kubernetes-apt-keyring.asc
  become: true

- name: Download Kubernetes apt-key
  get_url:
    url: https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key
    dest: /etc/apt/keyrings/kubernetes-apt-keyring.asc
    mode: '0644'
    force: true
  become: true
  retries: 5
  delay: 10
  register: key_download
  until: key_download is success
  environment:
    http_proxy: ""
    https_proxy: ""

- name: Add Kubernetes apt repository
  apt_repository:
    repo: deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.asc] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /
    state: present
    filename: kubernetes
    update_cache: yes
  become: true

# Install containerd
- name: Install containerd
  apt:
    name: containerd
    state: present
  become: true

# Configure containerd
- name: Create containerd config directory
  file:
    path: /etc/containerd
    state: directory
  become: true

- name: Configure containerd
  shell: containerd config default > /etc/containerd/config.toml
  become: true

- name: Update containerd config for systemd cgroup driver
  replace:
    path: /etc/containerd/config.toml
    regexp: 'SystemdCgroup = false'
    replace: 'SystemdCgroup = true'
  become: true

- name: Restart containerd
  systemd:
    name: containerd
    state: restarted
    daemon_reload: yes
    enabled: yes
  become: true

# Install Kubernetes packages
- name: Install Kubernetes packages
  apt:
    name:
      - kubelet
      - kubeadm
      - kubectl
    state: present
  become: true

- name: Hold Kubernetes packages
  dpkg_selections:
    name: "{{ item }}"
    selection: hold
  loop:
    - kubelet
    - kubeadm
    - kubectl
  become: true

# Disable swap
- name: Disable swap
  command: swapoff -a
  become: true

- name: Remove swap from /etc/fstab
  replace:
    path: /etc/fstab
    regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
    replace: '# \1'
  become: true

# Load kernel modules
- name: Load kernel modules
  modprobe:
    name: "{{ item }}"
    state: present
  loop:
    - overlay
    - br_netfilter
  become: true

# Configure sysctl params
- name: Configure sysctl params for Kubernetes
  sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    state: present
    reload: yes
  loop:
    - { name: 'net.bridge.bridge-nf-call-iptables', value: '1' }
    - { name: 'net.bridge.bridge-nf-call-ip6tables', value: '1' }
    - { name: 'net.ipv4.ip_forward', value: '1' }
  become: true

# Configure containerd
- name: Create containerd config directory
  file:
    path: /etc/modules-load.d
    state: directory
    mode: '0755'

- name: Enable kernel modules for containerd
  copy:
    content: |
      overlay
      br_netfilter
    dest: /etc/modules-load.d/containerd.conf
    mode: '0644'

- name: Load kernel modules
  shell: |
    modprobe overlay
    modprobe br_netfilter

- name: Setup required sysctl params
  copy:
    content: |
      net.bridge.bridge-nf-call-iptables  = 1
      net.bridge.bridge-nf-call-ip6tables = 1
      net.ipv4.ip_forward                 = 1
    dest: /etc/sysctl.d/99-kubernetes-cri.conf
    mode: '0644'

- name: Apply sysctl params
  command: sysctl --system

# Install containerd
- name: Add Docker apt key
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present

- name: Add Docker repository
  apt_repository:
    repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
    state: present

- name: Install containerd
  apt:
    name: containerd.io
    state: present

- name: Create containerd configuration directory
  file:
    path: /etc/containerd
    state: directory
    mode: '0755'

- name: Configure containerd
  shell: containerd config default > /etc/containerd/config.toml

- name: Update containerd config to use systemd cgroup driver
  replace:
    path: /etc/containerd/config.toml
    regexp: 'SystemdCgroup = false'
    replace: 'SystemdCgroup = true'

- name: Restart containerd
  systemd:
    name: containerd
    state: restarted
    daemon_reload: yes
    enabled: yes

# Install Kubernetes components
- name: Add Kubernetes apt key
  apt_key:
    url: https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key
    state: present

- name: Add Kubernetes repository
  apt_repository:
    repo: "deb https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /"
    state: present

- name: Install Kubernetes components
  apt:
    name: "{{ item }}"
    state: present
    update_cache: yes
  with_items:
    - kubelet=1.28.2-1.1
    - kubeadm=1.28.2-1.1
    - kubectl=1.28.2-1.1

- name: Hold Kubernetes packages
  dpkg_selections:
    name: "{{ item }}"
    selection: hold
  with_items:
    - kubelet
    - kubeadm
    - kubectl

# Disable swap
- name: Disable swap
  command: swapoff -a

- name: Remove swap from fstab
  replace:
    path: /etc/fstab
    regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
    replace: '# \1'

# Setup firewall (optional)
- name: Ensure ufw is installed
  apt:
    name: ufw
    state: present

- name: Allow SSH through firewall
  ufw:
    rule: allow
    name: OpenSSH

- name: Set UFW default policy
  ufw:
    direction: incoming
    policy: deny

- name: Enable UFW
  ufw:
    state: enabled
