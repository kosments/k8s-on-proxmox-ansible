---
# Download and create Ubuntu cloud image template
- name: Check if Ubuntu cloud image exists
  stat:
    path: /var/lib/vz/template/iso/ubuntu-22.04-server-cloudimg-amd64.img
  register: cloud_image

- name: Download latest Ubuntu 22.04 cloud image
  get_url:
    url: https://cloud-images.ubuntu.com/releases/22.04/release/ubuntu-22.04-server-cloudimg-amd64.img
    dest: /var/lib/vz/template/iso/ubuntu-22.04-server-cloudimg-amd64.img
    mode: '0644'
  become: true
  when: not cloud_image.stat.exists

- name: Check if VM exists
  command: qm status {{ vm.id }}
  register: vm_exists
  ignore_errors: yes
  changed_when: false
  failed_when: false

- name: Display VM creation status
  debug:
    msg: "VM {{ vm.name }} ({{ vm.id }}) {{ 'already exists, skipping creation' if vm_exists.rc == 0 else 'will be created' }}"

- name: Create new VM
  command: >
    qm create {{ vm.id }} 
    --name {{ vm.name }} 
    --memory 2048 
    --cores 2 
    --net0 virtio,bridge=vmbr0
  become: true
  when: vm_exists.rc != 0
  register: create_result
  failed_when: create_result.rc != 0 and 'already exists' not in create_result.stderr

- name: Confirm VM creation
  debug:
    msg: "Successfully created VM {{ vm.name }} ({{ vm.id }})"
  when: vm_exists.rc != 0 and create_result.rc == 0

- name: Import disk
  command: >
    qm importdisk {{ vm.id }} 
    /var/lib/vz/template/iso/ubuntu-22.04-server-cloudimg-amd64.img 
    local-lvm
  become: true
  register: disk_import
  failed_when: disk_import.rc != 0 and 'already exists' not in disk_import.stderr
  when: vm_exists.rc != 0

- name: Configure VM basic settings
  command: >
    qm set {{ vm.id }}
    --scsihw virtio-scsi-pci
    --scsi0 local-lvm:vm-{{ vm.id }}-disk-0
    --boot c
    --bootdisk scsi0
    --ide2 local-lvm:cloudinit
    --serial0 socket
    --vga serial0
    --ciuser ubuntu
    --cipassword "{{ vm_password | default('ubuntu') }}"
    --sshkeys ~/.ssh/id_rsa.pub
    --ipconfig0 ip={{ vm.ip }}/24,gw=192.168.10.1
    --nameserver 8.8.8.8
  become: true
  when: vm_exists.rc != 0

- name: Check if VM is running
  command: qm status {{ vm.id }}
  register: vm_status
  changed_when: false

- name: Start VM if not running
  command: qm start {{ vm.id }}
  become: true
  when: '"running" not in vm_status.stdout'

- name: Wait for VM to be ready
  wait_for:
    host: "{{ vm.ip }}"
    port: 22
    timeout: 300
    state: started
  register: wait_result
  ignore_errors: yes

- name: Handle SSH connection timeout
  debug:
    msg: "Warning: SSH connection to {{ vm.name }} ({{ vm.ip }}) timed out. VM may still be booting."
  when: wait_result is failed

- name: Show VM status
  debug:
    msg: "VM {{ vm.name }} ({{ vm.id }}) is ready and accessible via SSH at {{ vm.ip }}"
  when: wait_result is success
  delegate_to: localhost

- name: Test SSH connectivity to {{ vm.name }}
  wait_for:
    host: "{{ vm.ip }}"
    port: 22
    delay: 30
    timeout: 60
  register: ssh_test
  ignore_errors: yes

- name: Show SSH connectivity status
  debug:
    msg: "SSH connectivity to VM {{ vm.name }} ({{ vm.ip }}): {{ 'Success' if ssh_test is success else 'Failed' }}"
