---
# Sequential Kubernetes Cluster Setup
# This playbook sets up nodes one by one to avoid SSH connection issues

- name: Setup Master Node
  hosts: masters
  become: yes
  gather_facts: yes
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    k8s_version: "1.28.2-1.1"
    pod_cidr: "10.244.0.0/16"
  
  tasks:
    - name: Set hostname
      hostname:
        name: k8s-master
    
    - name: Update system
      apt:
        update_cache: yes
        upgrade: yes
    
    - name: Install required packages
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
        state: present
    
    - name: Disable swap
      shell: |
        swapoff -a
        sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab
    
    - name: Load kernel modules
      modprobe:
        name: "{{ item }}"
        state: present
      loop:
        - overlay
        - br_netfilter
    
    - name: Setup kernel modules for boot
      copy:
        content: |
          overlay
          br_netfilter
        dest: /etc/modules-load.d/containerd.conf
        mode: '0644'
    
    - name: Setup sysctl params
      copy:
        content: |
          net.bridge.bridge-nf-call-iptables  = 1
          net.bridge.bridge-nf-call-ip6tables = 1
          net.ipv4.ip_forward                 = 1
        dest: /etc/sysctl.d/99-kubernetes-cri.conf
        mode: '0644'
    
    - name: Apply sysctl params
      command: sysctl --system
    
    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
    
    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present
    
    - name: Install containerd
      apt:
        name: containerd.io
        state: present
        update_cache: yes
    
    - name: Create containerd config directory
      file:
        path: /etc/containerd
        state: directory
        mode: '0755'
    
    - name: Configure containerd
      shell: containerd config default > /etc/containerd/config.toml
    
    - name: Update containerd config for systemd cgroup
      replace:
        path: /etc/containerd/config.toml
        regexp: 'SystemdCgroup = false'
        replace: 'SystemdCgroup = true'
    
    - name: Restart and enable containerd
      systemd:
        name: containerd
        state: restarted
        enabled: yes
        daemon_reload: yes
    
    - name: Add Kubernetes GPG key
      apt_key:
        url: https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key
        state: present
    
    - name: Add Kubernetes repository
      apt_repository:
        repo: "deb https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /"
        state: present
        filename: kubernetes
    
    - name: Install Kubernetes packages
      apt:
        name:
          - "kubelet={{ k8s_version }}"
          - "kubeadm={{ k8s_version }}"
          - "kubectl={{ k8s_version }}"
        state: present
        update_cache: yes
    
    - name: Hold Kubernetes packages
      dpkg_selections:
        name: "{{ item }}"
        selection: hold
      loop:
        - kubelet
        - kubeadm
        - kubectl
    
    - name: Enable kubelet
      systemd:
        name: kubelet
        enabled: yes
    
    - name: Check if cluster is already initialized
      stat:
        path: /etc/kubernetes/admin.conf
      register: k8s_admin_conf
    
    - name: Initialize Kubernetes cluster
      shell: >
        kubeadm init 
        --pod-network-cidr={{ pod_cidr }}
        --apiserver-advertise-address={{ ansible_host }}
        --control-plane-endpoint={{ ansible_host }}:6443
        --upload-certs
      register: kubeadm_init
      when: not k8s_admin_conf.stat.exists
    
    - name: Create kube directory for ubuntu user
      file:
        path: /home/ubuntu/.kube
        state: directory
        owner: ubuntu
        group: ubuntu
        mode: '0755'
    
    - name: Copy admin.conf to ubuntu user
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/ubuntu/.kube/config
        remote_src: yes
        owner: ubuntu
        group: ubuntu
        mode: '0644'
    
    - name: Generate join command
      shell: kubeadm token create --print-join-command
      register: join_command
      when: kubeadm_init.changed or not k8s_admin_conf.stat.exists
    
    - name: Save join command locally
      local_action:
        module: copy
        content: "{{ join_command.stdout }}"
        dest: "/tmp/kubeadm_join_cmd.sh"
        mode: '0755'
      when: join_command is defined and join_command.stdout is defined
    
    - name: Install Flannel CNI
      shell: kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      when: kubeadm_init.changed or not k8s_admin_conf.stat.exists
    
    - name: Wait for master node to be ready
      shell: kubectl get nodes | grep -i ready
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      register: master_ready
      until: master_ready.rc == 0
      retries: 10
      delay: 30

- name: Setup Worker Node 1
  hosts: k8s-node1
  become: yes
  gather_facts: yes
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    k8s_version: "1.28.2-1.1"
  
  tasks:
    - name: Set hostname
      hostname:
        name: k8s-node1
    
    - name: Update system
      apt:
        update_cache: yes
        upgrade: yes
    
    - name: Install required packages
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
        state: present
    
    - name: Disable swap
      shell: |
        swapoff -a
        sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab
    
    - name: Load kernel modules
      modprobe:
        name: "{{ item }}"
        state: present
      loop:
        - overlay
        - br_netfilter
    
    - name: Setup kernel modules for boot
      copy:
        content: |
          overlay
          br_netfilter
        dest: /etc/modules-load.d/containerd.conf
        mode: '0644'
    
    - name: Setup sysctl params
      copy:
        content: |
          net.bridge.bridge-nf-call-iptables  = 1
          net.bridge.bridge-nf-call-ip6tables = 1
          net.ipv4.ip_forward                 = 1
        dest: /etc/sysctl.d/99-kubernetes-cri.conf
        mode: '0644'
    
    - name: Apply sysctl params
      command: sysctl --system
    
    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
    
    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present
    
    - name: Install containerd
      apt:
        name: containerd.io
        state: present
        update_cache: yes
    
    - name: Create containerd config directory
      file:
        path: /etc/containerd
        state: directory
        mode: '0755'
    
    - name: Configure containerd
      shell: containerd config default > /etc/containerd/config.toml
    
    - name: Update containerd config for systemd cgroup
      replace:
        path: /etc/containerd/config.toml
        regexp: 'SystemdCgroup = false'
        replace: 'SystemdCgroup = true'
    
    - name: Restart and enable containerd
      systemd:
        name: containerd
        state: restarted
        enabled: yes
        daemon_reload: yes
    
    - name: Add Kubernetes GPG key
      apt_key:
        url: https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key
        state: present
    
    - name: Add Kubernetes repository
      apt_repository:
        repo: "deb https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /"
        state: present
        filename: kubernetes
    
    - name: Install Kubernetes packages
      apt:
        name:
          - "kubelet={{ k8s_version }}"
          - "kubeadm={{ k8s_version }}"
          - "kubectl={{ k8s_version }}"
        state: present
        update_cache: yes
    
    - name: Hold Kubernetes packages
      dpkg_selections:
        name: "{{ item }}"
        selection: hold
      loop:
        - kubelet
        - kubeadm
        - kubectl
    
    - name: Enable kubelet
      systemd:
        name: kubelet
        enabled: yes
    
    - name: Check if join command exists
      stat:
        path: /tmp/kubeadm_join_cmd.sh
      delegate_to: localhost
      register: join_cmd_file
    
    - name: Copy join command to node
      copy:
        src: /tmp/kubeadm_join_cmd.sh
        dest: /tmp/kubeadm_join_cmd.sh
        mode: '0755'
      when: join_cmd_file.stat.exists
    
    - name: Join node to cluster
      shell: bash /tmp/kubeadm_join_cmd.sh
      when: join_cmd_file.stat.exists

- name: Setup Worker Node 2
  hosts: k8s-node2
  become: yes
  gather_facts: yes
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    k8s_version: "1.28.2-1.1"
  
  tasks:
    - name: Set hostname
      hostname:
        name: k8s-node2
    
    - name: Update system
      apt:
        update_cache: yes
        upgrade: yes
    
    - name: Install required packages
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
        state: present
    
    - name: Disable swap
      shell: |
        swapoff -a
        sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab
    
    - name: Load kernel modules
      modprobe:
        name: "{{ item }}"
        state: present
      loop:
        - overlay
        - br_netfilter
    
    - name: Setup kernel modules for boot
      copy:
        content: |
          overlay
          br_netfilter
        dest: /etc/modules-load.d/containerd.conf
        mode: '0644'
    
    - name: Setup sysctl params
      copy:
        content: |
          net.bridge.bridge-nf-call-iptables  = 1
          net.bridge.bridge-nf-call-ip6tables = 1
          net.ipv4.ip_forward                 = 1
        dest: /etc/sysctl.d/99-kubernetes-cri.conf
        mode: '0644'
    
    - name: Apply sysctl params
      command: sysctl --system
    
    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
    
    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present
    
    - name: Install containerd
      apt:
        name: containerd.io
        state: present
        update_cache: yes
    
    - name: Create containerd config directory
      file:
        path: /etc/containerd
        state: directory
        mode: '0755'
    
    - name: Configure containerd
      shell: containerd config default > /etc/containerd/config.toml
    
    - name: Update containerd config for systemd cgroup
      replace:
        path: /etc/containerd/config.toml
        regexp: 'SystemdCgroup = false'
        replace: 'SystemdCgroup = true'
    
    - name: Restart and enable containerd
      systemd:
        name: containerd
        state: restarted
        enabled: yes
        daemon_reload: yes
    
    - name: Add Kubernetes GPG key
      apt_key:
        url: https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key
        state: present
    
    - name: Add Kubernetes repository
      apt_repository:
        repo: "deb https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /"
        state: present
        filename: kubernetes
    
    - name: Install Kubernetes packages
      apt:
        name:
          - "kubelet={{ k8s_version }}"
          - "kubeadm={{ k8s_version }}"
          - "kubectl={{ k8s_version }}"
        state: present
        update_cache: yes
    
    - name: Hold Kubernetes packages
      dpkg_selections:
        name: "{{ item }}"
        selection: hold
      loop:
        - kubelet
        - kubeadm
        - kubectl
    
    - name: Enable kubelet
      systemd:
        name: kubelet
        enabled: yes
    
    - name: Check if join command exists
      stat:
        path: /tmp/kubeadm_join_cmd.sh
      delegate_to: localhost
      register: join_cmd_file
    
    - name: Copy join command to node
      copy:
        src: /tmp/kubeadm_join_cmd.sh
        dest: /tmp/kubeadm_join_cmd.sh
        mode: '0755'
      when: join_cmd_file.stat.exists
    
    - name: Join node to cluster
      shell: bash /tmp/kubeadm_join_cmd.sh
      when: join_cmd_file.stat.exists

- name: Verify Cluster
  hosts: masters
  become: yes
  gather_facts: no
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
  
  tasks:
    - name: Wait for all nodes to be ready
      shell: kubectl get nodes --no-headers | grep -v Ready | wc -l
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      register: nodes_not_ready
      until: nodes_not_ready.stdout == "0"
      retries: 20
      delay: 30
    
    - name: Display cluster status
      shell: kubectl get nodes
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      register: cluster_status
    
    - name: Show cluster nodes
      debug:
        msg: "{{ cluster_status.stdout_lines }}"
    
    - name: Display pod status
      shell: kubectl get pods -A
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      register: pod_status
    
    - name: Show all pods
      debug:
        msg: "{{ pod_status.stdout_lines }}"
    
    - name: Copy kubeconfig for local use
      fetch:
        src: /etc/kubernetes/admin.conf
        dest: ./kubeconfig
        flat: yes
